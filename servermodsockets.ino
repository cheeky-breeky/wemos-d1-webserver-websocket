#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

#include <WebSocketsServer.h>


#ifndef APSSID
#define APSSID "ECGnet"
#define APPSK  ""
#endif

WebSocketsServer webSocket = WebSocketsServer(81);

const char *page_index = R"=====(
<!DOCTYPE html>
<html>
  <head>
    <title>tim's page</title>
    <script src='zuri.js'></script>
    <style>
      body{
        background-color:#9e9e9e;
      }
    </style>
  </head>
  <body>
    <h2>mini HR monitor</h2>
    <canvas id='gc' width='680' height='400'></canvas>
    <img src="images/lead3.gif" alt="lead placement">
  </body>
</html>
)=====";

const char *js_code = R"=====(
  var gc;
  var c;
 
  var time = 0;
 
  var conv = 2 * Math.PI;
 
  var wav1 = [];
  var wav2 = [];
  var wav3 = [];

  //var Socket;

  var frames;
  var skip;

  var HR = "---";

  var avgHR = [];

  var handle_timer;
 
  window.onload = function() {
    gc = document.getElementById('gc');
    c = gc.getContext('2d')

    Socket = new WebSocket('ws://' + window.location.hostname + ':81/');
    Socket.onmessage = function(event) {
      ++skip;
      if(skip & 0x01) wav3.unshift(event.data);
      //Socket.send('.');
      ++frames;
    }
    Socket.onopen = function() {
      Socket.send('.');
      console.log('here');
    }
    Socket.onclose = function() {
      console.log('died');
    }

    frames = 0;
    skip = 0;
   
    setInterval(game, 1000/15);
    handle_timer = setInterval(reset_hr, 2000);
  }

  function reset_hr() {
    HR = "---";
    avgHR = [];
  }
 
  function game() {
    c.lineWidth = 1;
    c.fillStyle = 'gray';
    c.fillRect(0, 0, gc.width, gc.height);
   
    [nx, ny] = make_circle(50, 15, 10, time);
    wav1.unshift(ny);

    c.beginPath();
    c.strokeStyle = 'orange';
    c.moveTo(nx, ny);
    c.lineTo(100, ny);
    c.stroke();
   
    c.beginPath();
    c.strokeStyle = 'white';
    for(x= 0; x< wav1.length; ++x) c.lineTo(x + 100, wav1[x]);
    c.stroke();
   
    while(wav1.length > 500) wav1.pop();
    while(wav3.length > 500) wav3.pop();

    normalize_mult();

    calc_HR();

    c.fillStyle = 'green';
    c.font = 'bold 64px Unknown Font, sans-serif';
    c.fillText(HR, 20, 380);
   
    frames = 0;
   
    time += 10;
  }

  function calc_HR() {
    var max0 = 0;
    var min0 = 2000;
   
    var threshold;
    var peakFound;
   
    var canAdd = false;
    var markers = [];
   
    for(x= 0; x< wav3.length; ++x) {
      if(wav3[x] > max0) max0 = wav3[x];
      if(wav3[x] < min0) min0 = wav3[x];
    }

    if((max0 - min0) > 50) {
   
      threshold = (0.2 * (max0 - min0)) + min0; // 80% between min and max
     
      peakFound = false;
      for(x= 0; x< wav3.length; ++x) {
        if(canAdd == false) {
          if(wav3[x] > threshold) canAdd = true;
        } else if(wav3[x] < threshold) {
          if(peakFound == false) {
            peakFound = true;
            // draw red marker
            //if(canAdd) {
              c.beginPath();
              c.strokeStyle = 'red';
              c.moveTo(580 - x, (400 - ((wav3[x] * 400) / 1024)) + 5);
              c.lineTo(580 - x, (400 - ((wav3[x] * 400) / 1024)) - 5);
              c.stroke();
              // make markers
              markers.unshift(x);
              //
              clearInterval(handle_timer);
              handle_timer = setInterval(reset_hr, 2000);
              // skip some vals
              x += 5;
            //}
          }
        } else {
          peakFound = false;
        }
      }
     
      while(markers.length > 2) markers.pop();
     
      if(markers.length == 2) {
        //var rollsum = 0;
        HR = Math.abs(markers[0] - markers[1]);
        //rollsum += Math.abs(markers[1] - markers[2]);
        //rollsum += Math.abs(markers[2] - markers[3]);
       // rollsum += Math.abs(markers[3] - markers[4]);
       
        //HR = Math.round(rollsum);
        HR /= ((frames * 15) / 2);
        HR = 1 / HR;
        HR = Math.round(HR * 60);
 
        avgHR.unshift(HR);
 
        while(avgHR.length > 128) avgHR.pop();
 
        var sum = 0;
        for(x = 0; x< avgHR.length; ++x) {
          sum += avgHR[x];
        }
 
        HR = Math.round(sum / avgHR.length);
       
        if((HR < 5) || (HR > 250)) HR = "---";
      }
    }
  }
 
  function make_circle(x, y, r, a) {
    // draw circle
    c.beginPath();
    c.strokeStyle = 'blue';
    c.arc(x, y, r, 0, conv);
    c.stroke();

    // caculate line coordinates
    let ad = r * Math.cos((conv * a) / 360);
    let op = r * Math.sin((conv * a) / 360);

    // plot line
    c.beginPath();
    c.strokeStyle = 'white';
    c.moveTo(x, y);
    c.lineTo(x + ad, y + op);
    c.stroke();

    // return line coordinates
    return [x + ad, y + op];
  }
 
  function normalize_mult() {    
    c.beginPath();
    c.lineWidth = 2;
    c.strokeStyle = '#62ff00';
    for(x= 0; x< wav3.length; ++x) {
      //wav3[x] =
      c.lineTo(580 - x, 400 - ((wav3[x] * 400) / 1024));
    }
    c.stroke();
  }
)=====";

/* Set these to your desired credentials. */
const char *ssid = APSSID;
const char *password = APPSK;

int val;

uint8_t client_num;

int doSomething = false;

unsigned long startTime;
unsigned long endTime;

ESP8266WebServer server(80);

/* Just a little test message.  Go to http://192.168.4.1 in a web browser
   connected to this access point to see it.
*/
void handleRoot() {
  server.send(200, "text/html", page_index);
}

void handleJS() {
  server.send(200, "text/script", js_code);
}

void handleADC() {
  val = analogRead(A0);
  server.send(200, "text/html", String(val));
}

void handleFavicon() {
  static const uint8_t gif[] PROGMEM = {
      0x47, 0x49, 0x46, 0x38, 0x37, 0x61, 0x10, 0x00, 0x10, 0x00, 0x80, 0x01,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x10, 0x00, 0x00, 0x02, 0x19, 0x8c, 0x8f, 0xa9, 0xcb, 0x9d,
      0x00, 0x5f, 0x74, 0xb4, 0x56, 0xb0, 0xb0, 0xd2, 0xf2, 0x35, 0x1e, 0x4c,
      0x0c, 0x24, 0x5a, 0xe6, 0x89, 0xa6, 0x4d, 0x01, 0x00, 0x3b
    };
    char gif_colored[sizeof(gif)];
    memcpy_P(gif_colored, gif, sizeof(gif));
    // Set the background to a random set of colors
    gif_colored[16] = random(0, 255);//millis() % 256;
    gif_colored[17] = random(0, 255);//millis() % 256;
    gif_colored[18] = random(0, 255);//millis() % 256;
    server.send(200, "image/gif", gif_colored, sizeof(gif_colored));
}

void handleImage() {
  static const uint8_t gif[] PROGMEM = {
          0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x3c, 0x00, 0x39, 0x00, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x66, 0x00, 0x00, 0x99, 0x00, 0x00, 0xcc, 0x00, 0x00, 0xff, 0x00, \
          0x2b, 0x00, 0x00, 0x2b, 0x33, 0x00, 0x2b, 0x66, 0x00, 0x2b, 0x99, 0x00, 0x2b, 0xcc, 0x00, 0x2b, 0xff, 0x00, 0x55, 0x00, 0x00, 0x55, 0x33, 0x00, 0x55, 0x66, 0x00, 0x55, 0x99, 0x00, 0x55, 0xcc, \
          0x00, 0x55, 0xff, 0x00, 0x80, 0x00, 0x00, 0x80, 0x33, 0x00, 0x80, 0x66, 0x00, 0x80, 0x99, 0x00, 0x80, 0xcc, 0x00, 0x80, 0xff, 0x00, 0xaa, 0x00, 0x00, 0xaa, 0x33, 0x00, 0xaa, 0x66, 0x00, 0xaa, \
          0x99, 0x00, 0xaa, 0xcc, 0x00, 0xaa, 0xff, 0x00, 0xd5, 0x00, 0x00, 0xd5, 0x33, 0x00, 0xd5, 0x66, 0x00, 0xd5, 0x99, 0x00, 0xd5, 0xcc, 0x00, 0xd5, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x33, 0x00, \
          0xff, 0x66, 0x00, 0xff, 0x99, 0x00, 0xff, 0xcc, 0x00, 0xff, 0xff, 0x33, 0x00, 0x00, 0x33, 0x00, 0x33, 0x33, 0x00, 0x66, 0x33, 0x00, 0x99, 0x33, 0x00, 0xcc, 0x33, 0x00, 0xff, 0x33, 0x2b, 0x00, \
          0x33, 0x2b, 0x33, 0x33, 0x2b, 0x66, 0x33, 0x2b, 0x99, 0x33, 0x2b, 0xcc, 0x33, 0x2b, 0xff, 0x33, 0x55, 0x00, 0x33, 0x55, 0x33, 0x33, 0x55, 0x66, 0x33, 0x55, 0x99, 0x33, 0x55, 0xcc, 0x33, 0x55, \
          0xff, 0x33, 0x80, 0x00, 0x33, 0x80, 0x33, 0x33, 0x80, 0x66, 0x33, 0x80, 0x99, 0x33, 0x80, 0xcc, 0x33, 0x80, 0xff, 0x33, 0xaa, 0x00, 0x33, 0xaa, 0x33, 0x33, 0xaa, 0x66, 0x33, 0xaa, 0x99, 0x33, \
          0xaa, 0xcc, 0x33, 0xaa, 0xff, 0x33, 0xd5, 0x00, 0x33, 0xd5, 0x33, 0x33, 0xd5, 0x66, 0x33, 0xd5, 0x99, 0x33, 0xd5, 0xcc, 0x33, 0xd5, 0xff, 0x33, 0xff, 0x00, 0x33, 0xff, 0x33, 0x33, 0xff, 0x66, \
          0x33, 0xff, 0x99, 0x33, 0xff, 0xcc, 0x33, 0xff, 0xff, 0x66, 0x00, 0x00, 0x66, 0x00, 0x33, 0x66, 0x00, 0x66, 0x66, 0x00, 0x99, 0x66, 0x00, 0xcc, 0x66, 0x00, 0xff, 0x66, 0x2b, 0x00, 0x66, 0x2b, \
          0x33, 0x66, 0x2b, 0x66, 0x66, 0x2b, 0x99, 0x66, 0x2b, 0xcc, 0x66, 0x2b, 0xff, 0x66, 0x55, 0x00, 0x66, 0x55, 0x33, 0x66, 0x55, 0x66, 0x66, 0x55, 0x99, 0x66, 0x55, 0xcc, 0x66, 0x55, 0xff, 0x66, \
          0x80, 0x00, 0x66, 0x80, 0x33, 0x66, 0x80, 0x66, 0x66, 0x80, 0x99, 0x66, 0x80, 0xcc, 0x66, 0x80, 0xff, 0x66, 0xaa, 0x00, 0x66, 0xaa, 0x33, 0x66, 0xaa, 0x66, 0x66, 0xaa, 0x99, 0x66, 0xaa, 0xcc, \
          0x66, 0xaa, 0xff, 0x66, 0xd5, 0x00, 0x66, 0xd5, 0x33, 0x66, 0xd5, 0x66, 0x66, 0xd5, 0x99, 0x66, 0xd5, 0xcc, 0x66, 0xd5, 0xff, 0x66, 0xff, 0x00, 0x66, 0xff, 0x33, 0x66, 0xff, 0x66, 0x66, 0xff, \
          0x99, 0x66, 0xff, 0xcc, 0x66, 0xff, 0xff, 0x99, 0x00, 0x00, 0x99, 0x00, 0x33, 0x99, 0x00, 0x66, 0x99, 0x00, 0x99, 0x99, 0x00, 0xcc, 0x99, 0x00, 0xff, 0x99, 0x2b, 0x00, 0x99, 0x2b, 0x33, 0x99, \
          0x2b, 0x66, 0x99, 0x2b, 0x99, 0x99, 0x2b, 0xcc, 0x99, 0x2b, 0xff, 0x99, 0x55, 0x00, 0x99, 0x55, 0x33, 0x99, 0x55, 0x66, 0x99, 0x55, 0x99, 0x99, 0x55, 0xcc, 0x99, 0x55, 0xff, 0x99, 0x80, 0x00, \
          0x99, 0x80, 0x33, 0x99, 0x80, 0x66, 0x99, 0x80, 0x99, 0x99, 0x80, 0xcc, 0x99, 0x80, 0xff, 0x99, 0xaa, 0x00, 0x99, 0xaa, 0x33, 0x99, 0xaa, 0x66, 0x99, 0xaa, 0x99, 0x99, 0xaa, 0xcc, 0x99, 0xaa, \
          0xff, 0x99, 0xd5, 0x00, 0x99, 0xd5, 0x33, 0x99, 0xd5, 0x66, 0x99, 0xd5, 0x99, 0x99, 0xd5, 0xcc, 0x99, 0xd5, 0xff, 0x99, 0xff, 0x00, 0x99, 0xff, 0x33, 0x99, 0xff, 0x66, 0x99, 0xff, 0x99, 0x99, \
          0xff, 0xcc, 0x99, 0xff, 0xff, 0xcc, 0x00, 0x00, 0xcc, 0x00, 0x33, 0xcc, 0x00, 0x66, 0xcc, 0x00, 0x99, 0xcc, 0x00, 0xcc, 0xcc, 0x00, 0xff, 0xcc, 0x2b, 0x00, 0xcc, 0x2b, 0x33, 0xcc, 0x2b, 0x66, \
          0xcc, 0x2b, 0x99, 0xcc, 0x2b, 0xcc, 0xcc, 0x2b, 0xff, 0xcc, 0x55, 0x00, 0xcc, 0x55, 0x33, 0xcc, 0x55, 0x66, 0xcc, 0x55, 0x99, 0xcc, 0x55, 0xcc, 0xcc, 0x55, 0xff, 0xcc, 0x80, 0x00, 0xcc, 0x80, \
          0x33, 0xcc, 0x80, 0x66, 0xcc, 0x80, 0x99, 0xcc, 0x80, 0xcc, 0xcc, 0x80, 0xff, 0xcc, 0xaa, 0x00, 0xcc, 0xaa, 0x33, 0xcc, 0xaa, 0x66, 0xcc, 0xaa, 0x99, 0xcc, 0xaa, 0xcc, 0xcc, 0xaa, 0xff, 0xcc, \
          0xd5, 0x00, 0xcc, 0xd5, 0x33, 0xcc, 0xd5, 0x66, 0xcc, 0xd5, 0x99, 0xcc, 0xd5, 0xcc, 0xcc, 0xd5, 0xff, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0x33, 0xcc, 0xff, 0x66, 0xcc, 0xff, 0x99, 0xcc, 0xff, 0xcc, \
          0xcc, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x33, 0xff, 0x00, 0x66, 0xff, 0x00, 0x99, 0xff, 0x00, 0xcc, 0xff, 0x00, 0xff, 0xff, 0x2b, 0x00, 0xff, 0x2b, 0x33, 0xff, 0x2b, 0x66, 0xff, 0x2b, \
          0x99, 0xff, 0x2b, 0xcc, 0xff, 0x2b, 0xff, 0xff, 0x55, 0x00, 0xff, 0x55, 0x33, 0xff, 0x55, 0x66, 0xff, 0x55, 0x99, 0xff, 0x55, 0xcc, 0xff, 0x55, 0xff, 0xff, 0x80, 0x00, 0xff, 0x80, 0x33, 0xff, \
          0x80, 0x66, 0xff, 0x80, 0x99, 0xff, 0x80, 0xcc, 0xff, 0x80, 0xff, 0xff, 0xaa, 0x00, 0xff, 0xaa, 0x33, 0xff, 0xaa, 0x66, 0xff, 0xaa, 0x99, 0xff, 0xaa, 0xcc, 0xff, 0xaa, 0xff, 0xff, 0xd5, 0x00, \
          0xff, 0xd5, 0x33, 0xff, 0xd5, 0x66, 0xff, 0xd5, 0x99, 0xff, 0xd5, 0xcc, 0xff, 0xd5, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x33, 0xff, 0xff, 0x66, 0xff, 0xff, 0x99, 0xff, 0xff, 0xcc, 0xff, 0xff, \
          0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0xfc, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x39, 0x00, 0x00, 0x08, \
          0xff, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0x20, 0x41, 0x65, 0xc4, 0x10, 0x2a, 0x4c, 0xc8, 0x70, 0xa1, 0xc3, 0x7d, 0x06, 0x23, 0x4a, 0x9c, 0x28, 0x91, 0xd8, 0x27, 0x8b, 0x18, 0x2f, 0x6a, 0xcc, \
          0xc8, 0x51, 0x19, 0x1a, 0x8a, 0x20, 0x43, 0x0e, 0x44, 0xe3, 0xb0, 0xa1, 0xc9, 0x92, 0x08, 0x89, 0x89, 0x5c, 0x39, 0x71, 0x1f, 0xc7, 0x8d, 0x30, 0x5f, 0x5a, 0x54, 0xc6, 0xb2, 0x66, 0x41, 0x94, \
          0x27, 0x73, 0x2e, 0xfc, 0x68, 0xd3, 0xa6, 0xcc, 0x98, 0x40, 0x13, 0x66, 0x52, 0x36, 0xa9, 0x67, 0x4d, 0x92, 0x3a, 0x93, 0x22, 0xbc, 0x88, 0x90, 0xa7, 0x51, 0x91, 0x93, 0x86, 0x4a, 0x55, 0x36, \
          0xb5, 0xea, 0xd2, 0x86, 0x43, 0x8b, 0x3e, 0x5d, 0x89, 0x13, 0xe5, 0x50, 0x86, 0x4c, 0x89, 0x39, 0xdd, 0x0a, 0xf2, 0xa7, 0xd0, 0xab, 0x68, 0xcf, 0x92, 0xe5, 0x9a, 0x93, 0xe9, 0x57, 0xaa, 0x57, \
          0xc3, 0xae, 0x15, 0x49, 0xf2, 0x6b, 0xd8, 0x85, 0x77, 0xc1, 0x8a, 0x9d, 0x2b, 0xf2, 0x2c, 0x46, 0xb8, 0x6f, 0xcf, 0xbe, 0xe5, 0x4b, 0xb7, 0xe4, 0xdd, 0xa9, 0x58, 0xb5, 0x12, 0x2e, 0x0b, 0xd8, \
          0x61, 0xe0, 0x8d, 0x10, 0x17, 0x8b, 0xdc, 0xa7, 0xd0, 0xea, 0xdf, 0x86, 0x92, 0x59, 0x5e, 0xf6, 0x0a, 0x37, 0x73, 0xcd, 0xa8, 0x8d, 0x11, 0x7b, 0xf4, 0xdc, 0x13, 0x69, 0xc9, 0xb1, 0xa4, 0x53, \
          0xab, 0x5e, 0x3d, 0x77, 0x12, 0xcd, 0xae, 0x4a, 0x75, 0xa2, 0x26, 0x8b, 0x06, 0x23, 0x00, 0xb3, 0x41, 0x73, 0xab, 0x4c, 0xb8, 0xf6, 0x21, 0x00, 0xd8, 0xc0, 0x4f, 0xfe, 0x4e, 0x38, 0x3b, 0x24, \
          0x1a, 0xca, 0x76, 0x89, 0x41, 0x1c, 0xa6, 0x4c, 0x53, 0x32, 0x4d, 0xfb, 0x86, 0x81, 0x92, 0x4e, 0x7d, 0xba, 0xf5, 0xea, 0xf6, 0xec, 0xd9, 0xbe, 0xcc, 0x72, 0xa1, 0x5e, 0x65, 0x10, 0x9b, 0x27, \
          0xff, 0x23, 0x26, 0xad, 0x7c, 0x70, 0x84, 0xd9, 0xb3, 0x23, 0x1c, 0x0e, 0x77, 0xef, 0xc4, 0xe3, 0xdf, 0x03, 0x87, 0x57, 0x5e, 0xbe, 0xfc, 0x5f, 0xab, 0x53, 0xd3, 0xdb, 0xd3, 0x44, 0x53, 0x34, \
          0xef, 0x88, 0x95, 0xe1, 0x25, 0x18, 0x44, 0xc4, 0x24, 0xa3, 0x4c, 0x7d, 0xe6, 0x6d, 0x76, 0x92, 0x7e, 0xca, 0x0c, 0xc3, 0xde, 0x7d, 0xa3, 0x15, 0x84, 0x55, 0x7b, 0xbe, 0xf1, 0xa7, 0x09, 0x82, \
          0x14, 0x32, 0xe7, 0xdc, 0x86, 0xcf, 0xe9, 0xc7, 0x9b, 0x5f, 0x79, 0xdd, 0x14, 0x58, 0x68, 0x08, 0x85, 0xc7, 0xdc, 0x3e, 0xf6, 0x21, 0x64, 0x5d, 0x42, 0xcc, 0x9d, 0xb4, 0xcf, 0x3e, 0xfc, 0x65, \
          0xf2, 0x60, 0x80, 0x0c, 0x39, 0xa5, 0x57, 0x5e, 0x70, 0xcd, 0x07, 0x4a, 0x42, 0x16, 0x8e, 0x77, 0xd5, 0x8e, 0x17, 0x5d, 0xb7, 0xa3, 0x8f, 0xb7, 0xc5, 0x44, 0x23, 0x4d, 0xbf, 0x8d, 0xe8, 0xdf, \
          0x27, 0xb7, 0x8d, 0xf7, 0x9c, 0x93, 0xc4, 0xec, 0xa8, 0x50, 0x8b, 0x0d, 0x2e, 0xf4, 0xdc, 0x7a, 0x86, 0x5d, 0xc6, 0x94, 0x69, 0x1d, 0xe9, 0x25, 0xd0, 0x8e, 0x52, 0xf2, 0x78, 0xd5, 0x95, 0x1b, \
          0x36, 0x07, 0x17, 0x7f, 0xc4, 0x01, 0x80, 0xc6, 0x46, 0x02, 0x7a, 0x87, 0xe3, 0x54, 0x04, 0x15, 0x58, 0xa0, 0x73, 0x72, 0x2a, 0xc4, 0x1f, 0x95, 0x78, 0x36, 0xb8, 0xa3, 0x53, 0x01, 0xbe, 0x35, \
          0x95, 0x80, 0x17, 0xed, 0x33, 0x9b, 0x8a, 0x0c, 0x01, 0x89, 0xd1, 0x78, 0x43, 0xf6, 0x68, 0x61, 0x95, 0x8a, 0xa9, 0xa9, 0xa4, 0x9b, 0x97, 0x15, 0x57, 0xe4, 0x9c, 0x3e, 0x36, 0x74, 0xa7, 0x99, \
          0x79, 0xa2, 0x39, 0x1b, 0x72, 0x6d, 0x3a, 0x04, 0x52, 0x49, 0x86, 0x5e, 0x84, 0x68, 0x9d, 0x18, 0x0d, 0x69, 0x51, 0xa3, 0x23, 0x35, 0x86, 0x91, 0x45, 0x92, 0x4a, 0xb8, 0x51, 0xa5, 0x84, 0xfa, \
          0xff, 0x18, 0xe3, 0x94, 0x66, 0xba, 0x17, 0x91, 0x4b, 0x0e, 0xa1, 0x4a, 0x91, 0x43, 0xb3, 0x0e, 0xd5, 0xa2, 0xa9, 0xe2, 0x45, 0xc9, 0x22, 0x51, 0x14, 0xd5, 0xb6, 0x51, 0x4d, 0x1d, 0x51, 0x39, \
          0xab, 0x86, 0x55, 0x46, 0xc9, 0xac, 0x26, 0xad, 0x0e, 0xb4, 0x50, 0x4d, 0x56, 0x0a, 0x0b, 0x2c, 0x8f, 0xb2, 0xfa, 0xc8, 0x1c, 0x73, 0x92, 0xd0, 0x35, 0x14, 0xb2, 0x41, 0x0e, 0x2b, 0x9d, 0xb3, \
          0xd3, 0xa9, 0xf8, 0xab, 0xb5, 0xb6, 0x86, 0x84, 0x24, 0x5b, 0x55, 0x0e, 0x85, 0x26, 0xac, 0x97, 0x95, 0xbb, 0x2d, 0xb1, 0xa4, 0x95, 0xca, 0xd0, 0xa8, 0x6c, 0x52, 0x2a, 0xa6, 0x85, 0xdd, 0x92, \
          0xe6, 0xd0, 0xb8, 0xe5, 0x4e, 0x88, 0x66, 0xb0, 0x4e, 0xa6, 0x91, 0x5a, 0x97, 0xd9, 0x5e, 0x2a, 0x67, 0x58, 0x61, 0x46, 0x4b, 0xd6, 0xbf, 0x60, 0xb6, 0x28, 0x6b, 0xad, 0x70, 0x31, 0x97, 0xd5, \
          0xc1, 0x1b, 0x99, 0x0a, 0xe6, 0xa1, 0x73, 0x56, 0x39, 0x70, 0x26, 0x0e, 0x6f, 0xf5, 0x2f, 0xa6, 0xcd, 0xc6, 0x2a, 0x2c, 0x5a, 0xba, 0x12, 0x56, 0xaa, 0xc4, 0xe8, 0xb2, 0x79, 0xe9, 0x8b, 0x42, \
          0xa5, 0xcc, 0xd7, 0xb0, 0xfb, 0x42, 0x49, 0xab, 0x9c, 0x69, 0x50, 0x40, 0x41, 0x6d, 0x11, 0x7a, 0x66, 0x26, 0x87, 0x85, 0xda, 0x6b, 0x28, 0x28, 0x14, 0x54, 0x50, 0x01, 0x05, 0x4d, 0x1d, 0x6c, \
          0xf3, 0x59, 0x79, 0x52, 0x49, 0xcc, 0xd1, 0x45, 0x93, 0x24, 0xf3, 0x5c, 0x3f, 0x53, 0xa8, 0xa8, 0x99, 0xbe, 0xee, 0x53, 0x74, 0xd1, 0x2e, 0x85, 0xfc, 0x94, 0x9c, 0x95, 0x8a, 0x4a, 0x6a, 0xa5, \
          0x3b, 0xee, 0x73, 0x34, 0xa3, 0xa9, 0x55, 0x3d, 0x6e, 0xd5, 0xee, 0xea, 0xe9, 0xb4, 0x85, 0x5e, 0x1b, 0x85, 0xd0, 0x78, 0x77, 0xcd, 0xcb, 0x62, 0x98, 0xd7, 0x55, 0xd9, 0xef, 0x4a, 0x01, 0x01, \
          0x00, 0x3b
    };
    char gif_colored[sizeof(gif)];
    memcpy_P(gif_colored, gif, sizeof(gif));
    server.send(200, "image/gif", gif_colored, sizeof(gif_colored));
}


void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            Serial.printf("[%u] Disconnected!\n", num);
            doSomething = false;
            break;
        case WStype_CONNECTED:
            {
                IPAddress ip = webSocket.remoteIP(num);
                Serial.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);
                client_num = num;
                doSomething = true;
            }
            break;
        case WStype_TEXT:
            //Serial.printf("[%u] get Text: %s\n", num, payload);

            // send message to client
            //webSocket.sendTXT(num, "1234");
            //client_num = num;

            //doSomething = true;

            // send data to all connected clients
            // webSocket.broadcastTXT("message here");
            break;
        case WStype_BIN:
            Serial.printf("[%u] get binary length: %u\n", num, length);
            hexdump(payload, length);

            // send message to client
            // webSocket.sendBIN(num, payload, length);
            break;
    }

}

void setup() {
  delay(1000);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Configuring access point...");
  WiFi.softAP(ssid);

  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  server.on("/", handleRoot);
  server.on("/zuri.js", handleJS);
  server.on("/favicon.ico", handleFavicon);
  server.on("/images/lead3.gif", handleImage);
  server.on("/adc.txt", handleADC);
  server.begin();
  Serial.println("HTTP server started");

  // try to use a timer
  startTime = millis();
  //pinMode(D2, INPUT);
  //digitalWrite(D2, LOW);
}

void loop() {
  webSocket.loop();
  server.handleClient();

  endTime = millis();
  //pinMode(D2, INPUT);
  if ((endTime - startTime) > 6) {
    startTime = endTime;
    if(doSomething) {
      String data = "";
      val = analogRead(A0);
      data += String(val);
      webSocket.sendTXT(client_num, data);
      //doSomething = false;
    }
  }
}
